Атрибут data-page-name:
    Нужен для того, чтобы присвоить элементам с классом, указанным в атрибуте, класс __page-active. К этой кнопке нужно задать соответствующий класс, либо список классов через запятую, который и будет указан в data-page-name. Пример: data-page-name="class1" или data-page-name="class2";

Фильтр
    1. Параметры для фильтра берутся из /json/filter-values.json.
    2. По умолчанию все radio&checkbox, которые получают checked, засчитываются и указываются в badge в виде числа; если определенный input при checked не должен засчитываться, то ему в класс нужно указать "__no-count" (для этого, в свою очередь, нужно в json в values указать noCount: true, либо, если это единичный чекбокс, указать в параметрах этого чекбокса noCount: true).
    3. У input[type="radio"] в обязательном порядке должен присутствовать один дефолтный input с классом "__no-count".

Спойлеры:
    1. К элементу, а также его потомкам, которые будут кнопкой спойлера и самим скрываемым элементом, назначаются классы "spoiler", "spoiler__button", "spoiler__hideable" соответственно.
    2. К ".spoiler__button" можно добавить опциональный атрибут data-spoiler-changing-text="текст1, текст2", где "текст1" выводится при скрытом элементе, а "текст2" выводится при показанном элементе.

Контейнеры спойлеров (.spoiler-container):
    1. Нужны для создания аккордеонов (только один возможный открытый спойлер) и табов (только один открытый таб).
    2. По умолчанию если есть потомки .spoiler внутри .spoiler-container, то они будут работать в режиме аккордеона.
    3. Чтобы добавить поведение для таба, когда обязательно открыт один таб, нужно добавить атрибут data-spoiler-tab="mediaValue", где mediaValue = значение медиазапроса формата (min-width: <mediaValue>px), отображающее, с какого минимального разрешения появляется таб.
    
Слайдеры:
    Поведение описано в файле скриптов slider.js.

Текст-подсказка при наведении
    1. К элементу, над которым должна выводиться подсказка, добавляется атрибут data-title;
    2. Если этот элемент имеет overflow: hidden, в таком случае нужно прописать ему position: static, а ближайшему родителю, относительно которого можно спозиционировать подсказку (которая имеет position: absolute), нужно задать position: relative, и таким образом подсказка "выйдет за пределы" overflow и будет видна.

Элементы, которые зависят от режима авторизации пользователя:
    1. Большим элементам (вроде шапки - Header) в класс можно прописать метод renderUserInterface, а затем добавить его в вызов внутри одноименного метода внутри класса User (например: header.renderUserInterface внутри User.renderUserInterface, обязательно через setTimeout, чтобы успели прогрузиться другие скрипты).
    2. Элементы, которые не работают, когда пользователь неавторизован, должны иметь атрибут: 
        1) data-require-user="button" - обычные кнопки;
        2) data-require-user="button-close-icon" - кнопки, которые имеют иконку замка;
        3) data-require-user="render" - любые элементы, которые не появляются у незарегистрированного пользователя;
    3. К data-require-user помимо первого аргумента можно передать строку "signup"|"login", вызывающую соответственное окно при нажатии на кнопку.

Динамически перемещающиеся элементы:
    1. Элементам, меняющим свое положение на странице, нужно задавать атрибут data-dynamic-adaptive="selector, mediaQuery", где
        1) selector - селектор блока, в который будет перемещен элемент (если элементов найдено несколько, то будет найден ближайший к указанному [data-dynamic-adaptive] элемент);
        2) mediaQuery - медиа-запрос (max-witdh: mediaQuery), при выполненнии которого элемент будет перемещен в блок указанного селектора.

Скрываемые элементы:
    1. Кнопке, которая будет показывать скрываемые элементы, назначается атрибут data-show-more="selector", где selector - селектор блока, которому будет присваиваться/убираться класс .__show-more.
    2. Можно дополнительно задать атрибут data-show-more-text="textOnHide, textOnShow", для показа разных текстов в зависимости от состояния (показано больше или показано меньше).
    3. Можно создать обертку для текста, установив ей класс "show-more__text". Это может пригодиться в случаях, когда нужно изменять содержимое через data-show-more-text, но при этом в самой кнопке помимо текста находится какой-либо элемент.

Прокрутка с дымкой:
    1. Блоку-родителю элемента, который прокручивается, задать атрибут data-scroll-shadow="selector", где selector - селектор прокручиваемого элемента;
    2. Создать ".scroll-shadow.scroll-shadow-end" и ".scroll-shadow.scroll-shadow-start" внутри блока-родителя (если нет, будут созданы и помещены туда)

Любые скрываемые элементы (spoiler, show-more, ...)
    1. Можно добавить опциональный атрибут data-click-closable="mediaMinValue boolean, mediaMinValue2 boolean, ...", который будет закрывать элемент по клику в любом месте окна браузера, кроме потомков "[data-click-closable]. В этом атрибуте:
        1) можно указывать несколько пар значений "mediaMinValue boolean";
        2) mediaMinValue - минимальный media-запрос, т.е. вида (min-width: mediaMinValue);
        3) boolean - значение true (значит, что спойлер подвержен закрытию по клику в браузере) или false (значит, что спойлер будет закрываться только по клику на кнопке ".spoiler__button").

Изменяющие состояние кнопки (data-changing-button):
    1. Кнопкам, которые изменяют свое состояние, присваивается атрибут data-changing-button="classList='', contentContainer='', content=''", где:
        1) classList='classNameOld:-classNameNew' - classNameOld указывается при обычном состоянии, classNameNew указывается при новом состоянии. Их нужно указывать через пробел, а разделяются состояния с помощью знака ":-";
        2) contentContainer='selector' - указывает селектор блока внутри [data-chaning-button] элемента, в котором будет изменяться текст;
        3) content - изменяющийся текст. Разделяется с помощью ":-".
    2. Кнопке в измененном состоянии присваивается атрибут data-is-changed-button="true", а в исходном - data-is-changed-button="false".

    "classList='icon-star:icon-star-full', contentContainer='.jobs-list__user-button-text', content='В избранное:В избранном'"

Звездный рейтинг (star-rating, StarRating):
    1. Для создания нужно написать следующий шаблон:
        <div class="company-header__star-rating star-rating" data-stars-amount="5"  data-rating-value="0" data-stars-name="star-rating">
            <div class="star-rating__stars"></div>
        </div>
    2. data-stars-amount - количество звезд; data-stars-name - атрибут name у input'ов звезд; data-rating-value - значение рейтинга (активных звезд). Эти дата-атрибуты необязательны, в них здесь указаны значения по умолчанию.

Открытие модального окна по нажатию на изображение (data-onclick-modal):
    1. Соответствующим изображениям img задается атрибут data-modal-onclick.
    2. Опционально в атрибут передается строка "iframe". Она означает, что изображение находится внутри iframe и нужно передать открытие модального окна главному объекту window.


Страница jobs:
    1. Элементам, которые изменяют свое состояние (размер) в зависимости от того, выбрана ли вакансия или нет, нужно задавать класс "--jobs-full-elem". При выбранной вакансии такие элементы становятся меньше, что делается путем замены этого класса на следующий: "--jobs-resizable-elem".
    2. Для того, чтобы указать, какие из кнопок-input'ов из фильтра при их выборе должны помещаться в список тегов над списком вакансий, нужно указать их name'ы в массиве JobsListing.filterListItemNames.
    3. У input'ов фильтра обязательно должен присутствовать атрибут value, в котором находится название этого input'a (нужно как минимум для создания тегов)

Ссылка, открывающая модальное окно:
    1. Для создания такой ссылки нужно присвоить ей класс "create-modal-link", а также уникальный id для идентификации модального окна, которое будет вызвано.
    2. Отображение конкретного окна задается в классе CreateModalLink через id.
    3. Вместо id возможно использование атрибута data-agreement-name (для модальных окон соглашений) или data-modal-name.

Страница вакансии (с вкладками "Вакансия", "О работодателе"):
    1. К странице должны подключаться файлы scripts.js, job-detail.js.
    2. К body прописывается атрибут data-job-detail.
    3. К wrapper прописывается атрибут data-page-name="jobs".
    4. Во внутрь wrapper прописывается шаблон: 
        <div class="job-detail-wrapper">
            <div class="job-detail">
                <div class="job-detail__container"></div>
                <div class="jobs-detail-wrapper__loading loading-overlay"></div>
            </div>
        </div>

Вкладка "О работодателе":
    1. К странице должны подключаться файлы scripts.js, job-employer.js; variables.css, styles.css, employer.css.
    2. Внутри wrapper прописывается шаблон:
        <main class="content">
            <div class="job-company" data-employer-id="empxx"></div>
        </main>

Пошаговый переход (step-flow):
    1. Для контейнера, в котором будут находиться блоки (псевдостраницы) для пошагового перехода, прописывается класс "step-container".
    2. Для блоков (псевдостраниц) задается атрибут data-step-page="index", где index - название этой страницы. Обязательно наличие стартовой страницы, которой будет задан индекс "start".
    3. Для задания длины transition в милисекундах нужно указать это значение в атрибуте data-step-page-duration="ms".

Выбор шаблона (например, profile/resume/template)
    1. 
    . Чтобы указать первый выбранный элемент, нужно обозначить параметр name (передав его в объекте-аргументе otherParams конструктора CreateTemplateBlock), а затем в ссылку включить соответствующий запрос. Пример: <a href="/job1/profile/resume/template/?resume_template=line"></a>, где после "?" идет этот самый запрос, где resume_template === name, line === значение параметра, который будет выставлен.
    . Названия изображений обязательно должны иметь определенный порядок параметров и следовать ему. То есть, если есть возможность выбрать такие параметры в порядке "1) цвет; 2) шрифт", то в названии это должно выглядеть так: "gray_italic.jpg".
    . Обязательно указать расширение файла (.jpg, .png, ...) после значения options. Из этого следует, что для всех изображений этого параметра обязательно использование только одного расширения.